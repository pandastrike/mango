# This is a templatized verion of a CFo template for Amazon API Gateway with
# Lambda backends as the handlers.  This template forms the core of every
# Panda Sky app deployment, with mixins adding resources to the description.
#===============================================================================

# Specify the API Gateway
API:
  Type: "AWS::ApiGateway::RestApi"
  Properties:
    Name: "{{name}}-{{env}}"
    Description: {{description}}

LambdaRole:
  Type: "AWS::IAM::Role"
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - "sts:AssumeRole"
    Policies:
      - PolicyName: "{{@root/name}}-{{@root/env}}"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"
            - Effect: Allow
              Action:
                - "s3:*"
              Resource:
                - "arn:aws:s3:::*"

{{#each resources}}
{{#isnt path "/"}}
{{capitalizeFirst @key}}Resource:
  Type: "AWS::ApiGateway::Resource"
  Properties:
    RestApiId:
      Ref: API
    ParentId:
      {{#isnt parent "/"}}
      Ref: {{capitalizeFirst parent}}Resource
      {{else}}
      "Fn::GetAtt": ["API", "RootResourceId"]
      {{/isnt}}
    PathPart: "{{pathPart}}"
{{/isnt}}

{{capitalizeFirst @key}}OptionsMethod:
  Type: "AWS::ApiGateway::Method"
  Properties:
    RestApiId:
      Ref: API
    ResourceId:
      {{#isnt path "/"}}
      Ref: {{capitalizeFirst @key}}Resource
      {{else}}
      "Fn::GetAtt": ["API", "RootResourceId"]
      {{/isnt}}
    AuthorizationType: NONE
    HttpMethod: OPTIONS
    Integration:
      Type: MOCK
      IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            "method.response.header.Access-Control-Allow-Methods": "'{{methodList}}'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
      RequestTemplates:
        "application/json": "{statusCode: 200}"
    MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          "method.response.header.Access-Control-Allow-Headers": true
          "method.response.header.Access-Control-Allow-Methods": true
          "method.response.header.Access-Control-Allow-Origin": true

{{#each actions}}
{{camelName~}}
Method:
  {{#isnt ../path "/"}}
  {{#if signature.dependent}}
  DependsOn:
  {{#if signature.request}}
  - {{capitalizeFirst signature.request}}Resource
  - {{capitalizeFirst signature.request}}Model
  {{/if}}
  {{#if signature.response}}
  - {{capitalizeFirst signature.response}}Resource
  - {{capitalizeFirst signature.response}}Model
  {{/if}}
  {{/if}}
  {{/isnt}}
  Type: "AWS::ApiGateway::Method"
  Properties:
    RestApiId:
      Ref: API
    ResourceId:
      {{#isnt ../path "/"}}
      Ref: {{capitalizeFirst @../key}}Resource
      {{else}}
      "Fn::GetAtt": ["API", "RootResourceId"]
      {{/isnt}}
    AuthorizationType: NONE
    HttpMethod: {{uppercase method}}
    {{#if signature.request}}
    RequestModels:
      "application/json": {{capitalizeFirst signature.request}}
    {{/if}}
    {{#if ../parameters}}
    RequestParameters:
    {{#each ../parameters}}
    {{#if path}}
      "method.request.path.{{name}}": true
    {{else}}
      "method.request.querystring.{{name}}": true
    {{/if}}
    {{/each}}
    {{/if}}
    Integration:
      Type: AWS
      IntegrationHttpMethod: POST
      {{#unless ../parameters}}
      PassthroughBehavior: WHEN_NO_TEMPLATES
      {{/unless}}
      Uri:
        "Fn::Join":
          - ""
          -
            - "arn:aws:apigateway:"
            - {"Ref": "AWS::Region"}
            - ":lambda:path/2015-03-31/functions/"
            - {"Fn::GetAtt": ["{{~camelName~}}
            LambdaHandler",
            "Arn"]}
            - "/invocations"
      RequestTemplates:
        "application/json": >
          {
            "url": {
              "path": {
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              },
              "query": {
                #foreach($param in $input.params().querystring.keySet())
                "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            },
            "method": "$context.httpMethod",
            "headers": {
              #foreach($param in $input.params().header.keySet())
              "$param": "$util.escapeJavaScript($input.params().header.get($param))"
              #if($foreach.hasNext),#end
              #end
            },
            "content" : $input.json('$')
          }



      IntegrationResponses:
      {{#each IntegrationResponses}}
        - StatusCode: {{StatusCode}}
        {{#if SelectionPattern}}
          SelectionPattern: {{SelectionPattern}}
        {{/if}}
          ResponseParameters:
          {{#eachProperty ResponseParameters}}
            {{key}}: "{{value}}"
          {{/eachProperty}}

        {{#if ResponseTemplates}}
          ResponseTemplates:
          {{#eachProperty ResponseTemplates}}
            {{key}}: "{{value}}"
          {{/eachProperty}}
        {{/if}}

      {{/each}}

    MethodResponses:
    {{#each MethodResponses}}
      - StatusCode: {{StatusCode}}
        ResponseParameters:
        {{#eachProperty ResponseParameters}}
          {{key}}: {{value}}
        {{/eachProperty}}
    {{/each}}

{{camelName~}}
LambdaHandler:
  Type: "AWS::Lambda::Function"
  Properties:
    Description: "Handler for API {{~@root/name~}}"
    FunctionName: "
      {{~@root/name}}-{{@root/env}}-
      {{~dashName}}"

    Handler: "lib/sky.handler"
    Role:
      "Fn::GetAtt" : ["LambdaRole", "Arn"]
    Runtime: {{@root/aws/runtime}}
    Environment:
      Variables:
      {{#eachProperty @root/environmentVariables}}
        {{key}}: {{value}}
      {{/eachProperty}}
    Code:
      S3Bucket: "{{@root/env}}-{{@root/projectID}}"
      S3Key: "package.zip"

{{camelName~}}
LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        "Fn::GetAtt": ["
          {{~camelName~}}
          LambdaHandler",
          "Arn"]
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          -
            - "arn:aws:execute-api:"
            - {"Ref": "AWS::Region"}
            - ":"
            - {"Ref": "AWS::AccountId"}
            - ":"
            - {"Ref": "API"}
            - "/*/{{method}}{{../permissionsPath}}"

{{/each}}
{{/each}}

{{#each schema}}
{{capitalizeFirst @key}}Model:
  Type: "AWS::ApiGateway::Model"
  Properties:
    ContentType: "application/json"
    Description: TBD
    Name: {{capitalizeFirst @key}}
    RestApiId:
      Ref: API
    Schema: '{{json .}}'
{{/each}}

Deployment:
  DependsOn:
  {{#each resources}}
  {{#each actions}}
  - {{camelName~}}Method
  {{/each}}
  - {{capitalizeFirst @key}}OptionsMethod
  {{/each}}
  Type: "AWS::ApiGateway::Deployment"
  Properties:
    Description:  {{description}} deployment (generated by Panda Sky)
    RestApiId:
      Ref: API
    StageName: {{@root/env}}
    StageDescription:
      Description: {{@root/env}} for {{description}} (generated by Panda Sky)
      StageName: {{@root/env}}
      MethodSettings:
        - ResourcePath: "/"
          HttpMethod: GET
          MetricsEnabled: true
          DataTraceEnabled: false
          #LoggingLevel: INFO  # OFF, ERROR, INFO
          CachingEnabled: false
          # CacheTtlInSeconds: 1800
          # CacheDataEncrypted: false



# Specify CloudFront Distribution, if required.
{{#if aws.cloudfront}}
CFRDistro:
  DependsOn:
    - Deployment
  Type: "AWS::CloudFront::Distribution"
  Properties:
    DistributionConfig:
      Comment: "Origin is API Gateway deployment {{name}}-{{env}} -
        Setup by Panda Sky."
      Enabled: true
      PriceClass: {{aws.cloudfront.priceClass}}
      DefaultRootObject: ""

      Aliases:
      {{#each aws.cloudfront.aliases}}
        - {{.}}
      {{/each}}

      Origins:
        - Id: {{aws.cloudfront.originID}}
          DomainName:
            "Fn::Join":
              - "."
              -
                - {"Ref": "API"}
                - "execute-api"
                - {"Ref": "AWS::Region"}
                - "amazonaws.com"
          OriginPath: "/{{env}}"
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: "https-only"
            OriginSSLProtocols: [ "SSLv3", "TLSv1" ]

      ViewerCertificate:
        AcmCertificateArn: {{aws.cloudfront.cert}}
        MinimumProtocolVersion: 'TLSv1'
        SslSupportMethod: 'sni-only'


      DefaultCacheBehavior:
        TargetOriginId: {{aws.cloudfront.originID}}
        ForwardedValues:
          QueryString: true
          Cookies:
            Forward: all
          Headers:
            - Accept
            - Authorization
            - "Content-Type"
        DefaultTTL: 0
        MinTTL: 0
        MaxTTL: {{aws.cloudfront.maxTTL}}
        TrustedSigners: []
        ViewerProtocolPolicy: "redirect-to-https"
        AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
        CachedMethods:
          - GET
          - HEAD
          - OPTIONS
        Compress: false
{{/if}}

{{#if aws.route53}}
DNSRecords:
  DependsOn:
    - CFRDistro
  Type: "AWS::Route53::RecordSetGroup"
  Properties:
      Comment: "API Gateway deployment for {{name}}-{{env}} -
        Setup by Panda Sky."
      HostedZoneName: {{aws.route53.domain}}
      RecordSets:
        {{#each aws.route53.hostnames}}
        - Name: {{.}}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2  # CloudFront's HostedZoneId
            DNSName: {"Fn::GetAtt": ["CFRDistro", "DomainName"]}
        {{/each}}
{{/if}}
