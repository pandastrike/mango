AWSTemplateFormatVersion: "2010-09-09"
Description: "{{env}} {{name}} custom domain - deployed by Panda Sky"
Resources:
  {{#if aws.cache.waf}}
  WAF:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        SqlInjectionProtectionParam: "yes"
        CrossSiteScriptingProtectionParam: "yes"
        ActivateReputationListsProtectionParam: "yes"
        ActivateBadBotProtectionParam: "yes"
        SendAnonymousUsageData: "no"
        ActivateHttpFloodProtectionParam: "yes"
        RequestThreshold: "{{aws.cache.waf.floodThreshold}}"
        ActivateScansProbesProtectionParam: "yes"
        ErrorThreshold: "{{aws.cache.waf.errorThreshold}}"
        WAFBlockPeriod: "{{aws.cache.waf.blockTTL}}"
        AccessLogBucket: {{aws.cache.logBucket}}
      Tags:
        - Key: Substack Type
          Value: Custom Domain Firewall
        {{#each tags}}
        - Key: {{Key}}
          Value: {{Value}}
        {{/each}}
      TemplateURL: "https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations.template"

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      Description: CloudFront usage only
      UsagePlanName: CloudFront_only
      ApiStages:
        -
          ApiId: {{aws.cache.api}}
          Stage: {{env}}

  ApiKey:
    Type: "AWS::ApiGateway::ApiKey"
    Properties:
      Name: {{aws.stack.name}}-cloudfront
      Description: CloudFormation Only API Key for {{aws.stack.name}}
      Enabled: true
      GenerateDistinctId: false

  ApiKeyUsagePlan:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  GetApiKeyValue:
      DependsOn: "ApiKey"
      Type: Custom::ApiKeyValue
      Properties:
        ServiceToken: !GetAtt GetApiKeyValueFunction.Arn

  GetApiKeyValueFunctionRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLambdaServiceToAssumeRole"
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
          Policies:
            -
              PolicyName: RotateKeysPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  -
                    Effect: Allow
                    Action: 'apigateway:GET'
                    Resource: '*'

  GetApiKeyValueFunction:
    DependsOn:
      - GetApiKeyValueFunctionRole
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt GetApiKeyValueFunctionRole.Arn
      Runtime: python3.6
      Timeout: 120
      Environment:
        Variables:
          API_KEY: !Ref ApiKey
      Code:
        ZipFile: !Sub |
          import datetime
          import os

          import boto3
          import cfnresponse
          from botocore.exceptions import ClientError

          session = boto3.Session()
          apigw = session.client('apigateway')


          def lambda_handler(event, context):
            request_type = event['RequestType']
            request_type_allowed = ["Update", "Create"]
            from pprint import pprint
            responseData = {}

            print("Cloudformation Operation ==> ", request_type)

            if request_type in request_type_allowed:
              try:
                api_key = apigw.get_api_key(apiKey=os.getenv("API_KEY"), includeValue=True)
                responseData = {'Value': api_key['value']}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except ClientError as err:
                responseData = {"Error": "{}".format(err)}
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
  {{/if}}

  {{#each aws.hostnames}}
  CustomDomainCF{{@index}}:
    Type: "AWS::CloudFront::Distribution"
    {{#if @root.aws.cache.waf}}
    DependsOn:
      - "WAF"
      - GetApiKeyValueFunction
    {{/if}}
    Properties:
      DistributionConfig:
        Aliases:
          - {{.}}
        Comment: CloudFront Distribution for Sky API Custom Domain
        DefaultCacheBehavior:
          AllowedMethods: ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
          CachedMethods: ["GET", "HEAD", "OPTIONS"]
          Compress: true
          DefaultTTL: {{@root.aws.cache.expires}}
          MaxTTL: {{@root.aws.cache.expires}}
          MinTTL: 0
          ForwardedValues:
            Cookies:
              Forward: "all"
            Headers:
              {{#each @root.aws.cache.headers}}
              - {{.}}
              {{/each}}
            QueryString: true
            QueryStringCacheKeys: ["*"]
          SmoothStreaming: false
          TargetOriginId: {{@root.aws.cache.originID}}
          ViewerProtocolPolicy: redirect-to-https

        {{#with @root.aws.cache.paths}}
        CacheBehaviors:
          {{#each .}}
          - PathPattern: {{path}}
            DefaultTTL: {{ttl}}
            MaxTTL: {{ttl}}
            MinTTL: 0
            AllowedMethods: ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
            CachedMethods: ["GET", "HEAD", "OPTIONS"]
            Compress: true
            ForwardedValues:
              Cookies:
                Forward: "all"
              Headers:
                {{#each @root.aws.cache.headers}}
                - {{.}}
                {{/each}}
              QueryString: true
              QueryStringCacheKeys: ["*"]
            SmoothStreaming: false
            TargetOriginId: {{@root.aws.cache.originID}}
            ViewerProtocolPolicy: redirect-to-https
          {{/each}}
        {{/with}}

        DefaultRootObject: ""
        Enabled: true
        HttpVersion: {{@root.aws.cache.httpVersion}}
        IPV6Enabled: false
        Origins:
          - Id: {{@root.aws.cache.originID}}
            DomainName: {{@root.aws.cache.endpoint}}
            OriginPath: "/{{@root.env}}"
            CustomOriginConfig:
              HTTPSPort: 443
              OriginKeepaliveTimeout: 60
              OriginProtocolPolicy: "https-only"
              OriginReadTimeout: 30
              OriginSSLProtocols: [ "TLSv1.2" ]
            {{#if @root.aws.cache.waf}}
            OriginCustomHeaders:
              - HeaderName: x-api-key
                HeaderValue: !GetAtt GetApiKeyValue.Value
            {{/if}}
        PriceClass: PriceClass_{{@root.aws.cache.priceClass}}
        ViewerCertificate:
          AcmCertificateArn: {{@root.aws.cache.certificate}}
          MinimumProtocolVersion: {{@root.aws.cache.protocol}}
          SslSupportMethod: "sni-only"
        Logging:
          Bucket: {{@root.aws.cache.logBucket}}.s3.amazonaws.com
          IncludeCookies: true
          Prefix: ""
        {{#if @root.aws.cache.waf}}
        WebACLId:
          "Fn::GetAtt": ["WAF", "Outputs.WAFWebACL"]
        {{/if}}
      Tags:
      {{#each @root.tags}}
        - Key: {{Key}}
          Value: {{Value}}
      {{/each}}
  {{/each}}

  CustomDomainDNS:
    Type: "AWS::Route53::RecordSetGroup"
    DependsOn:
      {{#each aws.hostnames}}
      - "CustomDomainCF{{@index}}"
      {{/each}}
    Properties:
      Comment: Sky API endpoint for {{name}}-{{env}}
      HostedZoneId: {{aws.cache.hostedzone}}
      RecordSets:
        {{#each aws.hostnames}}
        - Name: {{.}}
          Type: A
          AliasTarget:
            DNSName:
              "Fn::GetAtt": ["CustomDomainCF{{@index}}", "DomainName"]
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2
        {{/each}}
