possibleResponses = require "./possible-responses"
addResponseMappingTemplates = require "./content-types"
{cat, isArray} = require "fairmont"

# Gateway does not, by default, support arbitrary HTTP responses.  Each response
# type must be explicitly specified in an API method description.  The code
# below adds these responses based on the enumerated response codes in the API
# description.
module.exports = (description) ->

  # Array of possible responses generated by the Lambda integration
  addIntegrationResponses = (method, methodList) ->
    addDefault = (status) ->
      response =
        StatusCode: status
        headers:
          "Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          "Access-Control-Allow-Methods": "'#{methodList}'"
          "Access-Control-Allow-Origin": "'*'"

      addResponseMappingTemplates response, method

    addOthers = (statuses) ->
      out = []
      for code in statuses
        out.push(
          StatusCode: code
          SelectionPattern: "^<#{possibleResponses[code]}>.*"
          headers:
            "Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            "Access-Control-Allow-Methods": "'#{methodList}'"
            "Access-Control-Allow-Origin": "'*'"

        )
      out

    s = method.signatures.response.status
    s = [s] if !isArray s # Only one response specified.

    # First response is "default" response, then all others.
    [d, others...] = s
    others.push 500 if 500 not in others
    return cat [addDefault d], (addOthers others)

  # Array of possible responses whitelisted by the Method response, coming from
  # the Integration response.
  addMethodResponses = (method) ->
    addDefault = (status) ->
      response =
        StatusCode: status
        headers:
          "Access-Control-Allow-Headers": true
          "Access-Control-Allow-Methods": true
          "Access-Control-Allow-Origin": true

      if method.signatures.response.mediatype?
        response.headers["Content-Type"] = true
      return response

    addOthers = (statuses) ->
      out = []
      for code in statuses
        out.push(
          StatusCode: code
          headers:
            "Access-Control-Allow-Headers": true
            "Access-Control-Allow-Methods": true
            "Access-Control-Allow-Origin": true
        )
      out

    s = method.signatures.response.status
    if !isArray s
      return [addDefault s] # Only one response specified.
    else
      # Start by adding the "default" response, then all others.
      [d, others...] = s
      return cat [addDefault d], (addOthers others)

  {resources} = description
  for r, resource of resources
    for httpMethod, method of resource.methods
      resources[r].methods[httpMethod].IntegrationResponses = addIntegrationResponses method, resource.methodList
      resources[r].methods[httpMethod].MethodResponses = addMethodResponses method
      delete method.signatures

  description.resources = resources
  description
