import possibleResponses from "./possible-responses"
import addResponseMappingTemplates from "./content-types"
import {cat, first, rest} from "panda-parchment"

# Gateway does not, by default, support arbitrary HTTP responses.  Each response
# type must be explicitly specified in an API method description.  The code
# below adds these responses based on the enumerated response codes in the API
# description.
Responses = (description) ->

  allowedHeaders = "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Cache-Control,ETag,Last-Modified"

  # Array of possible responses generated by the Lambda integration
  addIntegrationResponses = (method, methodList) ->
    addDefault = ->
      {cache} = method.signatures.response
      {maxAge, etag, lastModified} = cache if cache

      headers =
        "Access-Control-Allow-Headers": "'#{allowedHeaders}'"
        "Access-Control-Allow-Methods": "'#{methodList}'"
        "Access-Control-Allow-Origin": "'*'"

      if cache
        headers["Cache-Control"] = "'max-age=#{maxAge || 60}'"
      if etag
        headers["ETag"] = "integration.response.body.metadata.headers.etag"
      else if lastModified
        headers["Last-Modified"] = "integration.response.body.metadata.headers.lastModified"

      response =
        StatusCode: first method.signatures.response.status
        headers: headers
      addResponseMappingTemplates response, method

    addOthers = ->
      for code in rest method.signatures.response.status
        StatusCode: code
        SelectionPattern: "^<#{possibleResponses[code]}>.*"
        headers:
          "Access-Control-Allow-Headers": "'#{allowedHeaders}'"
          "Access-Control-Allow-Methods": "'#{methodList}'"
          "Access-Control-Allow-Origin": "'*'"

    # First response is "default" response, then all others.
    cat [addDefault()], addOthers()

  # Array of possible responses whitelisted by the Method response, coming from
  # the Integration response.
  addMethodResponses = (method) ->
    addDefault = ->
      {cache} = method.signatures.response
      {maxAge, etag, lastModified} = cache if cache

      headers =
        "Access-Control-Allow-Headers": true
        "Access-Control-Allow-Methods": true
        "Access-Control-Allow-Origin": true
        "Content-Type": true

      if cache
        headers["Cache-Control"] = true
      if etag
        headers["ETag"] = true
      else if lastModified
        headers["Last-Modified"] = true

      [
        StatusCode: first method.signatures.response.status
        headers: headers
      ]

    addOthers = ->
      for code in rest method.signatures.response.status
        StatusCode: code
        headers:
          "Access-Control-Allow-Headers": true
          "Access-Control-Allow-Methods": true
          "Access-Control-Allow-Origin": true

    cat addDefault(), addOthers()


  # Add responses that we don't require the developer to explicitly define
  implicitResponses = (method) ->
    if 500 not in method.signatures.response.status
      method.signatures.response.status.push 500
    if method.signatures.response.cache
      method.signatures.response.status.push 304
    method

  {resources} = description
  for r, resource of resources
    for httpMethod, method of resource.methods
      method = implicitResponses method

      resources[r].methods[httpMethod].IntegrationResponses = addIntegrationResponses method, resource.methodList
      resources[r].methods[httpMethod].MethodResponses = addMethodResponses method
      delete method.signatures

  description.resources = resources
  description

export default Responses
