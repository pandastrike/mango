"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = undefined;

var _https = require("https");

var _https2 = _interopRequireDefault(_https);

var _url = require("url");

var _url2 = _interopRequireDefault(_url);

var _awsSdk = require("aws-sdk");

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _fairmont = require("fairmont");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Generated by CoffeeScript 2.1.0
// This is the Lambda Killer custom resource.  It targes all the Lambdas in the Sky deployment and deletes them.
var Lambda, deleteAll, deleteFunction, handler, lambda, listFunctions, sendResponse;

Lambda = new _awsSdk2.default.Lambda();

listFunctions = (0, _fairmont.lift)(Lambda.listFunctions);

deleteFunction = (0, _fairmont.lift)(Lambda.deleteFunction);

lambda = function () {
  var Delete, list;
  list = (() => {
    var _ref = _asyncToGenerator(function* (fns = [], marker) {
      var Functions, NextMarker, params;
      params = {
        MaxItems: 100
      };
      if (marker) {
        params.Marker = marker;
      }
      ({ NextMarker, Functions } = yield listFunctions(params));
      fns = cat(fns, Functions);
      if (NextMarker) {
        return yield list(fns, NextMarker);
      } else {
        return fns;
      }
    });

    return function list() {
      return _ref.apply(this, arguments);
    };
  })();
  Delete = (() => {
    var _ref2 = _asyncToGenerator(function* (name) {
      return yield deleteFunction({
        FunctionName: name
      });
    });

    return function Delete(_x) {
      return _ref2.apply(this, arguments);
    };
  })();
  return {
    list,
    delete: Delete
  };
}();

deleteAll = (() => {
  var _ref3 = _asyncToGenerator(function* (stackName) {
    var isOurs, lambdas, name, names;
    // Get names of all Lambdas that are part of this environment
    lambdas = yield lambda.list();
    names = (0, _fairmont.collect)((0, _fairmont.project)("FunctionName", lambdas));
    isOurs = function (str) {
      return RegExp(`^${s.stackName}.+`).test(str);
    };
    names = (0, _fairmont.collect)((0, _fairmont.select)(isOurs, names));
    return yield Promise.all(function () {
      var i, len, results;
      results = [];
      for (i = 0, len = names.length; i < len; i++) {
        name = names[i];
        results.push(lambda.delete(name));
      }
      return results;
    }());
  });

  return function deleteAll(_x2) {
    return _ref3.apply(this, arguments);
  };
})();

exports.handler = handler = (() => {
  var _ref4 = _asyncToGenerator(function* (event, context) {
    var e;
    // For Non-Delete requests, immediately send a SUCCESS response.
    if (event.RequestType !== "Delete") {
      sendResponse(event, context, "SUCCESS");
      return;
    }
    try {
      yield deleteAll(event.StackName);
      return sendResponse(event, context, "SUCCESS");
    } catch (error) {
      e = error;
      return sendResponse(event, context, "FAILED", {
        Error: e
      });
    }
  });

  return function handler(_x3, _x4) {
    return _ref4.apply(this, arguments);
  };
})();

// CloudFormation waits for a result JSON object to be sent to the pre-signed S3 bucket URL.
sendResponse = function (event, context, responseStatus, responseData = {}) {
  var options, parsedUrl, request, responseBody;
  responseBody = JSON.stringify({
    Status: responseStatus,
    Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
    PhysicalResourceId: context.logStreamName,
    StackId: event.StackId,
    RequestId: event.RequestId,
    LogicalResourceId: event.LogicalResourceId,
    Data: responseData
  });
  parsedUrl = _url2.default.parse(event.ResponseURL);
  options = {
    hostname: parsedUrl.hostname,
    port: 443,
    path: parsedUrl.path,
    method: "PUT",
    headers: {
      "content-type": "",
      "content-length": responseBody.length
    }
  };
  request = _https2.default.request(options, function () {
    return context.done();
  });
  request.on("error", function (e) {
    console.log("sendResponse Error:" + e);
    return context.done();
  });
  request.write(responseBody);
  return request.end();
};

exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsQUFBTzs7OztBQUNQLEFBQU87Ozs7QUFDUCxBQUFPOzs7O0FBQ1AsQUFBUSxBQUFNLEFBQVMsQUFBUzs7Ozs7OztBQUxoQztBQUFBLElBQUEsUUFBQSxXQUFBLGdCQUFBLFNBQUEsUUFBQSxlQUFBOztBQU9BLFNBQVMsSUFBSSxBQUFHLGlCQUFQLEFBQVE7O0FBQ2pCLGdCQUFnQixvQkFBSyxBQUFNLE9BQVgsQUFBWTs7QUFDNUIsaUJBQWlCLG9CQUFLLEFBQU0sT0FBWCxBQUFZOztBQUU3QixTQUFZLFlBQ1Y7TUFBQSxRQUFBO0FBQUE7aUNBQU8sV0FBQyxNQUFELEFBQUssSUFBTCxBQUFTLFFBQ2Q7VUFBQSxXQUFBLFlBQUE7QUFBQTtBQUFVLGtCQUFELEFBQVc7QUFBWDtBQUNULFVBQUEsQUFBMEI7QUFBMUIsQUFBTSxlQUFOLEFBQU8sU0FBUCxBQUFnQjs7QUFFaEIsT0FBQSxFQUFBLEFBQUMsWUFBRCxBQUFhLEFBQWEsY0FBQSxNQUFNLGNBQWhDLEFBQTBCLEFBQU0sQUFBYztBQUM5QyxZQUFNLElBQUEsQUFBSSxLQUFKLEFBQVM7QUFDZixVQUFBLEFBQUc7QUFDRCxlQUFBLE1BQU0sS0FBQSxBQUFLLEtBRGIsQUFDRSxBQUFNLEFBQVU7QUFEbEIsYUFBQTtlQUFBLEFBR0U7QUFURzs7Ozs7OztBQVdQO2tDQUFTLFdBQUEsQUFBQztBQUFTLGFBQUE7QUFBcUIsc0JBQS9CLEFBQVUsQUFBTSxBQUFlLEFBQWM7QUFBZCxPQUFmOzs7Ozs7OztBQUN6QixBQUFDO0FBQU0sWUFiRyxBQWFWLEFBQWM7QUFBZDtBQWJPLEFBQUcsQ0FBQTs7QUFlWjtnQ0FBWSxXQUFBLEFBQUMsV0FFWDtRQUFBLFFBQUEsU0FBQSxNQUFBOztBQUFBLEFBQVUsY0FBQSxNQUFNLEFBQU0sT0FBWixBQUFNLEFBQU87QUFDdkIsWUFBUSx1QkFBUSx1QkFBQSxBQUFRLGdCQUFoQixBQUFRLEFBQXdCO0FBRXhDLGFBQVMsVUFBQSxBQUFDO2FBQVEsT0FBQSxJQUFNLEFBQUMsRUFBUCxBQUFRLFNBQVIsQUFBa0IsQUFBSyxNQUF2QixBQUF3QixLQUFqQyxBQUFTLEFBQTZCOztBQUMvQyxZQUFRLHVCQUFRLHNCQUFBLEFBQU8sUUFBZixBQUFRLEFBQWU7QUFFL0IsV0FBQSxjQUFNLEFBQVE7a0JBQUs7O0FBQUEsV0FBQSxvQ0FBQTs7cUJBQUEsQUFBTSxPQUFOLEFBQU8sT0FBUCxBQUFjO0FBQWQ7O0FBUlQsQUFRVixBQUFNLE9BQUEsQUFBTzs7Ozs7Ozs7QUFHZixRQTRDQSxBQUFRO2dDQTVDRSxXQUFBLEFBQUMsT0FBRCxBQUFRLFNBRWhCO1FBQUE7O0FBQUEsUUFBRyxBQUFLLE1BQUwsQUFBTSxnQkFBVCxBQUF3QjtBQUNwQixtQkFBQSxBQUFhLE9BQWIsQUFBb0IsU0FBcEIsQUFBNkIsQUFDN0I7QUFGSjtBQUlBOztBQUNFLFlBQU0sVUFBVSxBQUFLLE1BQWYsQUFBZ0I7YUFDdEIsYUFBQSxBQUFhLE9BQWIsQUFBb0IsU0FGdEIsQUFFRSxBQUE2QjtBQUYvQixhQUFBO0FBR007MEJBQ0osQUFBYSxPQUFiLEFBQW9CLFNBQXBCLEFBQTZCO0FBQVcsZUFKMUMsQUFJRSxBQUF1QyxBQUFRO0FBQVIsT0FBdkM7QUFWTTtBQXJDVjs7Ozs7Ozs7QUFvREEsZUFBZSxVQUFBLEFBQUMsT0FBRCxBQUFRLFNBQVIsQUFBaUIsZ0JBQWdCLGVBQWpDLEFBQThDLElBQzNEO01BQUEsU0FBQSxXQUFBLFNBQUE7QUFBQSxzQkFBZSxBQUFLO0FBQ2xCLFlBQUEsQUFBUTtBQUNSLFlBQVEsK0NBQStDLEFBQU8sUUFEOUQsQUFDK0Q7QUFDL0Qsd0JBQW9CLEFBQU8sUUFGM0IsQUFFNEI7QUFDNUIsYUFBUyxBQUFLLE1BSGQsQUFHZTtBQUNmLGVBQVcsQUFBSyxNQUpoQixBQUlpQjtBQUNqQix1QkFBbUIsQUFBSyxNQUx4QixBQUt5QjtBQUN6QixVQVBhLEFBQ2IsQUFNTTtBQU5OLEdBRGEsQUFBSTtBQVNuQixjQUFZLEFBQUcsY0FBSCxBQUFJLE1BQU0sQUFBSyxNQUFmLEFBQWdCO0FBQzVCO0FBQ0UsY0FBVSxBQUFTLFVBQW5CLEFBQW9CO0FBQ3BCLFVBREEsQUFDTTtBQUNOLFVBQU0sQUFBUyxVQUZmLEFBRWdCO0FBQ2hCLFlBSEEsQUFHUTtBQUNSO0FBQ0Usc0JBQUEsQUFBZ0I7QUFDaEIsd0JBQWtCLEFBQVksYUFOaEMsQUFLRSxBQUMrQjtBQUQvQjtBQUxGO0FBUUYsNEJBQVUsQUFBTSxRQUFOLEFBQWMsU0FBUztXQUFHLEFBQU8sUUFBVixBQUFHLEFBQVE7QUFBbEMsR0FBQSxBQUFLO0FBRWYsQUFBTyxVQUFQLEFBQVEsR0FBUixBQUFXLFNBQVMsVUFBQSxBQUFDO0FBQ25CLEFBQU8sWUFBUCxBQUFRLElBQUksd0JBQVosQUFBb0M7V0FDcEMsQUFBTyxRQUZXLEFBRWxCLEFBQVE7QUFGVjtBQUlBLEFBQU8sVUFBUCxBQUFRLE1BQVIsQUFBYztTQUNkLEFBQU8sUUEzQk0sQUEyQmIsQUFBUTtBQUVWIiwic291cmNlc0NvbnRlbnQiOlsiIyBUaGlzIGlzIHRoZSBMYW1iZGEgS2lsbGVyIGN1c3RvbSByZXNvdXJjZS4gIEl0IHRhcmdlcyBhbGwgdGhlIExhbWJkYXMgaW4gdGhlIFNreSBkZXBsb3ltZW50IGFuZCBkZWxldGVzIHRoZW0uXG5cbmltcG9ydCBodHRwcyBmcm9tIFwiaHR0cHNcIlxuaW1wb3J0IHVybCBmcm9tIFwidXJsXCJcbmltcG9ydCBTREsgZnJvbSBcImF3cy1zZGtcIlxuaW1wb3J0IHtsaWZ0LCBjb2xsZWN0LCBwcm9qZWN0LCBzZWxlY3R9IGZyb20gXCJmYWlybW9udFwiXG5cbkxhbWJkYSA9IG5ldyBTREsuTGFtYmRhKClcbmxpc3RGdW5jdGlvbnMgPSBsaWZ0IExhbWJkYS5saXN0RnVuY3Rpb25zXG5kZWxldGVGdW5jdGlvbiA9IGxpZnQgTGFtYmRhLmRlbGV0ZUZ1bmN0aW9uXG5cbmxhbWJkYSA9IGRvIC0+XG4gIGxpc3QgPSAoZm5zPVtdLCBtYXJrZXIpIC0+XG4gICAgcGFyYW1zID0ge01heEl0ZW1zOiAxMDB9XG4gICAgcGFyYW1zLk1hcmtlciA9IG1hcmtlciBpZiBtYXJrZXJcblxuICAgIHtOZXh0TWFya2VyLCBGdW5jdGlvbnN9ID0gYXdhaXQgbGlzdEZ1bmN0aW9ucyBwYXJhbXNcbiAgICBmbnMgPSBjYXQgZm5zLCBGdW5jdGlvbnNcbiAgICBpZiBOZXh0TWFya2VyXG4gICAgICBhd2FpdCBsaXN0IGZucywgTmV4dE1hcmtlclxuICAgIGVsc2VcbiAgICAgIGZuc1xuXG4gIERlbGV0ZSA9IChuYW1lKSAtPiBhd2FpdCBkZWxldGVGdW5jdGlvbiBGdW5jdGlvbk5hbWU6IG5hbWVcbiAge2xpc3QsIGRlbGV0ZTpEZWxldGV9XG5cbmRlbGV0ZUFsbCA9IChzdGFja05hbWUpIC0+XG4gICMgR2V0IG5hbWVzIG9mIGFsbCBMYW1iZGFzIHRoYXQgYXJlIHBhcnQgb2YgdGhpcyBlbnZpcm9ubWVudFxuICBsYW1iZGFzID0gYXdhaXQgbGFtYmRhLmxpc3QoKVxuICBuYW1lcyA9IGNvbGxlY3QgcHJvamVjdCBcIkZ1bmN0aW9uTmFtZVwiLCBsYW1iZGFzXG5cbiAgaXNPdXJzID0gKHN0cikgLT4gLy8vXiN7cy5zdGFja05hbWV9LisvLy8udGVzdCBzdHJcbiAgbmFtZXMgPSBjb2xsZWN0IHNlbGVjdCBpc091cnMsIG5hbWVzXG5cbiAgYXdhaXQgUHJvbWlzZS5hbGwgKGxhbWJkYS5kZWxldGUgbmFtZSBmb3IgbmFtZSBpbiBuYW1lcylcblxuXG5oYW5kbGVyID0gKGV2ZW50LCBjb250ZXh0KSAtPlxuICAjIEZvciBOb24tRGVsZXRlIHJlcXVlc3RzLCBpbW1lZGlhdGVseSBzZW5kIGEgU1VDQ0VTUyByZXNwb25zZS5cbiAgaWYgZXZlbnQuUmVxdWVzdFR5cGUgIT0gXCJEZWxldGVcIlxuICAgICAgc2VuZFJlc3BvbnNlIGV2ZW50LCBjb250ZXh0LCBcIlNVQ0NFU1NcIlxuICAgICAgcmV0dXJuXG5cbiAgdHJ5XG4gICAgYXdhaXQgZGVsZXRlQWxsIGV2ZW50LlN0YWNrTmFtZVxuICAgIHNlbmRSZXNwb25zZSBldmVudCwgY29udGV4dCwgXCJTVUNDRVNTXCJcbiAgY2F0Y2ggZVxuICAgIHNlbmRSZXNwb25zZSBldmVudCwgY29udGV4dCwgXCJGQUlMRURcIiwge0Vycm9yOiBlfVxuXG5cblxuIyBDbG91ZEZvcm1hdGlvbiB3YWl0cyBmb3IgYSByZXN1bHQgSlNPTiBvYmplY3QgdG8gYmUgc2VudCB0byB0aGUgcHJlLXNpZ25lZCBTMyBidWNrZXQgVVJMLlxuc2VuZFJlc3BvbnNlID0gKGV2ZW50LCBjb250ZXh0LCByZXNwb25zZVN0YXR1cywgcmVzcG9uc2VEYXRhPXt9KSAtPlxuICByZXNwb25zZUJvZHkgPSBKU09OLnN0cmluZ2lmeVxuICAgIFN0YXR1czogcmVzcG9uc2VTdGF0dXMsXG4gICAgUmVhc29uOiBcIlNlZSB0aGUgZGV0YWlscyBpbiBDbG91ZFdhdGNoIExvZyBTdHJlYW06IFwiICsgY29udGV4dC5sb2dTdHJlYW1OYW1lLFxuICAgIFBoeXNpY2FsUmVzb3VyY2VJZDogY29udGV4dC5sb2dTdHJlYW1OYW1lXG4gICAgU3RhY2tJZDogZXZlbnQuU3RhY2tJZFxuICAgIFJlcXVlc3RJZDogZXZlbnQuUmVxdWVzdElkXG4gICAgTG9naWNhbFJlc291cmNlSWQ6IGV2ZW50LkxvZ2ljYWxSZXNvdXJjZUlkXG4gICAgRGF0YTogcmVzcG9uc2VEYXRhXG5cbiAgcGFyc2VkVXJsID0gdXJsLnBhcnNlIGV2ZW50LlJlc3BvbnNlVVJMXG4gIG9wdGlvbnMgPVxuICAgIGhvc3RuYW1lOiBwYXJzZWRVcmwuaG9zdG5hbWVcbiAgICBwb3J0OiA0NDNcbiAgICBwYXRoOiBwYXJzZWRVcmwucGF0aFxuICAgIG1ldGhvZDogXCJQVVRcIlxuICAgIGhlYWRlcnM6XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcIlwiLFxuICAgICAgXCJjb250ZW50LWxlbmd0aFwiOiByZXNwb25zZUJvZHkubGVuZ3RoXG5cbiAgcmVxdWVzdCA9IGh0dHBzLnJlcXVlc3Qgb3B0aW9ucywgLT4gY29udGV4dC5kb25lKClcblxuICByZXF1ZXN0Lm9uIFwiZXJyb3JcIiwgKGUpIC0+XG4gICAgY29uc29sZS5sb2cgXCJzZW5kUmVzcG9uc2UgRXJyb3I6XCIgKyBlXG4gICAgY29udGV4dC5kb25lKClcblxuICByZXF1ZXN0LndyaXRlIHJlc3BvbnNlQm9keVxuICByZXF1ZXN0LmVuZCgpXG5cbmV4cG9ydCB7aGFuZGxlcn1cbiJdfQ==
//# sourceURL=/Users/david/Repositories/panda-sky/src/configuration/preprocessors/custom-resouces/lambda-killer/src.coffee
