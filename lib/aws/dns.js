// Generated by CoffeeScript 1.12.0
(function() {
  var async, collect, deepEqual, empty, ref, sleep, where;

  ref = require("fairmont"), async = ref.async, sleep = ref.sleep, collect = ref.collect, where = ref.where, empty = ref.empty, deepEqual = ref.deepEqual;

  module.exports = async(function*(config) {
    var addDelete, addUpsert, destroy, fullyQualify, getHostedZoneID, implement, reconcileAdditions, reconcileDeletions, ref1, root, route53, set, sync;
    route53 = (yield require("./index")(config.aws.region)).route53;
    ref1 = require("./url")(), root = ref1.root, fullyQualify = ref1.fullyQualify;
    getHostedZoneID = async(function*() {
      var result, zone, zones;
      zone = root(config.aws.hostnames[0]);
      zones = (yield route53.listHostedZones({}));
      result = collect(where({
        Name: zone
      }, zones.HostedZones));
      if (empty(result)) {
        return false;
      } else {
        return result[0].Id;
      }
    });
    addUpsert = function(source, target) {
      return {
        Action: "UPSERT",
        ResourceRecordSet: {
          Name: fullyQualify(target),
          Type: "A",
          AliasTarget: {
            HostedZoneId: "Z2FDTNDATAQYW2",
            DNSName: fullyQualify(source),
            EvaluateTargetHealth: false
          }
        }
      };
    };
    addDelete = function(source, target) {
      return {
        Action: "DELETE",
        ResourceRecordSet: {
          Name: fullyQualify(target),
          Type: "A",
          AliasTarget: {
            HostedZoneId: "Z2FDTNDATAQYW2",
            DNSName: fullyQualify(source),
            EvaluateTargetHealth: false
          }
        }
      };
    };
    reconcileAdditions = function(records, source) {
      var changeList, current, desired, i, len, name, record, ref2;
      changeList = [];
      ref2 = config.aws.hostnames;
      for (i = 0, len = ref2.length; i < len; i++) {
        name = ref2[i];
        record = collect(where({
          Name: fullyQualify(name)
        }, records));
        if (!empty(record)) {
          desired = addUpsert(source, name).ResourceRecordSet;
          current = record[0];
          delete current.ResourceRecords;
          if (deepEqual(desired, current)) {
            continue;
          }
        }
        changeList.push(addUpsert(source, name));
      }
      if (empty(changeList)) {
        return false;
      } else {
        return changeList;
      }
    };
    reconcileDeletions = function(records, source) {
      var changeList, i, len, name, record, ref2;
      changeList = [];
      ref2 = config.aws.hostnames;
      for (i = 0, len = ref2.length; i < len; i++) {
        name = ref2[i];
        record = collect(where({
          Name: fullyQualify(name)
        }, records));
        if (!empty(record)) {
          changeList.push(addDelete(source, name));
        }
      }
      if (empty(changeList)) {
        return false;
      } else {
        return changeList;
      }
    };
    sync = async(function*(id) {
      var data;
      console.log("Waiting for DNS records to synchronize.");
      while (true) {
        data = (yield route53.getChange({
          Id: id
        }));
        if (data.ChangeInfo.Status === "INSYNC") {
          return true;
        } else {
          yield sleep(5000);
        }
      }
    });
    implement = async(function*(id, changes) {
      var changeID, params;
      params = {
        HostedZoneId: id,
        ChangeBatch: {
          Changes: changes
        }
      };
      changeID = ((yield route53.changeResourceRecordSets(params))).ChangeInfo.Id;
      return (yield sync(changeID));
    });
    set = async(function*(arg) {
      var Distribution, changes, id, records;
      Distribution = arg.Distribution;
      console.log("Setting DNS records.");
      if (id = (yield getHostedZoneID())) {
        records = ((yield route53.listResourceRecordSets({
          HostedZoneId: id
        }))).ResourceRecordSets;
        if (changes = reconcileAdditions(records, Distribution.DomainName)) {
          yield implement(id, changes);
        }
        return console.log("DNS records up to date.");
      } else {
        throw new Error("No Hosted Zone for " + (root(config.aws.hostnames[0])) + ".");
      }
    });
    destroy = async(function*(arg) {
      var Distribution, changes, id, records;
      Distribution = arg.Distribution;
      console.log("Deleting DNS records.");
      if (id = (yield getHostedZoneID())) {
        records = ((yield route53.listResourceRecordSets({
          HostedZoneId: id
        }))).ResourceRecordSets;
        if (changes = reconcileDeletions(records, Distribution.DomainName)) {
          yield implement(id, changes);
        }
        return console.log("DNS records up to date.");
      } else {
        return console.warn("No Hosted Zone for " + (root(config.aws.hostnames[0])) + ".");
      }
    });
    return {
      set: set,
      destroy: destroy
    };
  });

}).call(this);
