// Generated by CoffeeScript 1.12.0
(function() {
  var async, empty, exists, join, md5, read, ref, ref1, resolve, yaml;

  ref = require("fairmont"), async = ref.async, read = ref.read, md5 = ref.md5, empty = ref.empty, exists = ref.exists;

  yaml = require("panda-serialize").yaml;

  ref1 = require("path"), resolve = ref1.resolve, join = ref1.join;

  module.exports = async(function*(env, config) {
    var api, bucket, description, destroy, handlers, metadata, name, pkg, prepare, syncMetadata;
    name = env + "-" + config.projectID;
    bucket = (yield require("./s3")(env, config, name));
    pkg = join(process.cwd(), "deploy", "package.zip");
    description = join(process.cwd(), "api.yaml");
    if (!((yield exists(pkg)))) {
      throw new Error("Unable to find deploy/package.zip");
    }
    if (!((yield exists(description)))) {
      throw new Error("Unable to find api.yaml");
    }
    handlers = {
      isCurrent: async(function*(remote) {
        var local;
        local = md5((yield read(pkg, "buffer")));
        if (local === remote.handlers) {
          return true;
        } else {
          return false;
        }
      }),
      update: async(function*() {
        return (yield bucket.putObject("package.zip", pkg));
      })
    };
    api = {
      isCurrent: async(function*(remote) {
        var local;
        local = md5((yield read(description)));
        if (local === remote.api) {
          return true;
        } else {
          return false;
        }
      }),
      update: async(function*() {
        return (yield bucket.putObject("api.yaml", description));
      })
    };
    metadata = {
      fetch: async(function*() {
        var data;
        if (data = (yield bucket.getObject(".sky"))) {
          return yaml(data);
        } else {
          return false;
        }
      }),
      update: async(function*() {
        var data;
        data = {
          handlers: md5((yield read(pkg, "buffer"))),
          api: md5((yield read(description)))
        };
        return (yield bucket.putObject(".sky", yaml(data), "text/yaml"));
      })
    };
    prepare = async(function*() {
      var app, updates;
      app = (yield metadata.fetch());
      if (!app) {
        console.log("No deployment detected. Preparing Panda Sky infrastructure.");
        yield bucket.establish();
        yield api.update();
        yield handlers.update();
        return true;
      }
      updates = [];
      if (!((yield api.isCurrent(app)))) {
        yield api.update();
        updates.push("GW");
      }
      if (!((yield handlers.isCurrent(app)))) {
        yield handlers.update();
        updates.push("Lambda");
      }
      if (empty(updates)) {
        return false;
      } else {
        return updates;
      }
    });
    syncMetadata = async(function*() {
      return (yield metadata.update());
    });
    destroy = async(function*() {
      yield bucket.deleteObject(".sky");
      yield bucket.deleteObject("api.yaml");
      yield bucket.deleteObject("package.zip");
      return (yield bucket.destroy());
    });
    return {
      destroy: destroy,
      prepare: prepare,
      syncMetadata: syncMetadata
    };
  });

}).call(this);
