// Generated by CoffeeScript 1.12.0
(function() {
  var async, createReadStream, join, md5, mime, read, ref, sleep,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require("fairmont"), async = ref.async, sleep = ref.sleep, read = ref.read, md5 = ref.md5;

  createReadStream = require("fs").createReadStream;

  join = require("path").join;

  mime = require("mime");

  module.exports = async(function*(env, config, name) {
    var deleteObject, destroy, establish, getObject, putObject, s3;
    s3 = (yield require("./index")(config.aws.region)).s3;
    establish = async(function*() {
      var e, exists;
      try {
        exists = (yield s3.headBucket({
          Bucket: name
        }));
      } catch (error) {
        e = error;
        switch (e.statusCode) {
          case 301:
            console.error("The bucket is in a different region than the client " + "is currently configured to target. Correct the region in your " + "sky.yaml file.");
            throw new Error();
            break;
          case 403:
            console.error("You are not authorized to modify this bucket.");
            throw e;
            break;
          case 404:
            exists = false;
            break;
          default:
            throw e;
        }
      }
      if (exists) {
        return true;
      }
      try {
        yield s3.createBucket({
          Bucket: name
        });
        return (yield sleep(15000));
      } catch (error) {
        e = error;
        console.error("Failed to establish bucket.", e);
        throw new Error();
      }
    });
    putObject = async(function*(key, data, filetype) {
      var body, content, params;
      if (filetype) {
        content = body = new Buffer(data);
      } else {
        filetype = mime.lookup(data);
        body = createReadStream(data);
        content = indexOf.call(mime.lookup(data), "text") >= 0 ? (yield read(data)) : (yield read(data, "buffer"));
      }
      params = {
        Bucket: name,
        Key: key,
        ContentType: filetype,
        ContentMD5: new Buffer(md5(content), "hex").toString('base64'),
        Body: body
      };
      return (yield s3.putObject(params));
    });
    getObject = async(function*(key) {
      var data, e, params;
      params = {
        Bucket: name,
        Key: key
      };
      try {
        data = (yield s3.getObject(params));
        return data.Body.toString();
      } catch (error) {
        e = error;
        switch (e.statusCode) {
          case 301:
            console.error("The bucket is in a different region than the client " + "is currently configured to target. Correct the region in your " + "sky.yaml file.");
            throw new Error();
            break;
          case 403:
            console.error("You are not authorized to modify this S3 bucket: " + name);
            throw e;
            break;
          case 404:
            return false;
          default:
            console.error("Unexpected reply from AWS", e);
            throw e;
        }
      }
    });
    deleteObject = async(function*(key) {
      var e, params;
      params = {
        Bucket: name,
        Key: key
      };
      try {
        return (yield s3.deleteObject(params));
      } catch (error) {
        e = error;
        return console.warn("Failed to delete " + key, e);
      }
    });
    destroy = async(function*() {
      return (yield s3.deleteBucket({
        Bucket: name
      }));
    });
    return {
      destroy: destroy,
      deleteObject: deleteObject,
      establish: establish,
      getObject: getObject,
      putObject: putObject
    };
  });

}).call(this);
