// Generated by CoffeeScript 1.12.0
(function() {
  var async, collect, empty, ref, where,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require("fairmont"), async = ref.async, collect = ref.collect, where = ref.where, empty = ref.empty;

  module.exports = async(function*() {
    var acm, apex, fetch, getCertList, match, ref1, regularlyQualify, root, wild;
    acm = (yield require("./index")("us-east-1")).acm;
    ref1 = require("./url")(), root = ref1.root, regularlyQualify = ref1.regularlyQualify;
    wild = function(name) {
      return regularlyQualify("*." + root(name));
    };
    apex = function(name) {
      return regularlyQualify(root(name));
    };
    getCertList = async(function*() {
      var data;
      data = (yield acm.listCertificates({
        CertificateStatuses: ["ISSUED"]
      }));
      return data.CertificateSummaryList;
    });
    match = async(function*(name, list) {
      var alternates, cert, certs, data, i, len, ref2;
      certs = collect(where({
        DomainName: wild(name)
      }, list));
      if (!empty(certs)) {
        return certs[0].CertificateArn;
      }
      certs = collect(where({
        DomainName: apex(name)
      }, list));
      for (i = 0, len = certs.length; i < len; i++) {
        cert = certs[i];
        data = (yield acm.describeCertificate({
          CertificateArn: cert.CertificateArn
        }));
        alternates = data.Certificate.SubjectAlternativeNames;
        if (ref2 = wild(name), indexOf.call(alternates, ref2) >= 0) {
          return cert.CertificateArn;
        }
      }
      return false;
    });
    fetch = async(function*(name) {
      var arn, e;
      try {
        arn = (yield match(name, (yield getCertList())));
      } catch (error) {
        e = error;
        console.error("Unexpected response while searching SSL certs.", e);
        throw new Error();
      }
      if (!arn) {
        console.error("You do not have an active certificate for", wild(name));
        throw new Error();
      } else {
        return arn;
      }
    });
    return {
      fetch: fetch
    };
  });

}).call(this);
