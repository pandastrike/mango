// Generated by CoffeeScript 1.12.0
(function() {
  var _render, async, exists, isFile, join, last, merge, preprocessors, read, readdir, ref, ref1, resolve, yaml;

  ref = require("path"), join = ref.join, resolve = ref.resolve;

  ref1 = require("fairmont"), async = ref1.async, read = ref1.read, merge = ref1.merge, readdir = ref1.readdir, isFile = ref1.isFile, last = ref1.last, exists = ref1.exists;

  yaml = require("panda-serialize").yaml;

  _render = require("panda-template");

  preprocessors = require("./preprocessors");

  module.exports = async(function*(config, env) {
    var cfo, file, files, globals, mixins, render;
    globals = yaml((yield read(join(process.cwd(), "sky.yaml"))));
    globals = merge(config, {
      env: env
    });
    render = async(function*(names) {
      var data, dataPath, i, len, n, results, template;
      results = [];
      for (i = 0, len = names.length; i < len; i++) {
        n = names[i];
        template = (yield read(join(__dirname, "..", "..", "mixins", n + ".yaml")));
        dataPath = n === "api" ? "api" : "mixins/" + n;
        data = yaml((yield read(join(process.cwd(), dataPath + ".yaml"))));
        data = (yield preprocessors[n](merge(data, globals)));
        results.push(yaml(_render(template, data)));
      }
      return results;
    });
    if ((yield exists(join(process.cwd(), "mixins")))) {
      files = (yield readdir(join(process.cwd(), "mixins")));
      mixins = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          if (isFile(file)) {
            results.push(last(file.split("/")).split(".yaml")[0]);
          }
        }
        return results;
      })();
      mixins.unshift("api");
    } else {
      mixins = ["api"];
    }
    cfo = {
      AWSTemplateFormatVersion: "2010-09-09",
      Description: config.description || (config.name + " - deployed by Panda Sky"),
      Resources: merge.apply(null, (yield render(mixins)))
    };
    config.aws.cfoTemplate = JSON.stringify(cfo);
    return config;
  });

}).call(this);
