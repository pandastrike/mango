// Generated by CoffeeScript 1.12.0
(function() {
  var capitalize, cat, collect, first, last, project, ref, toLower, values,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require("fairmont"), toLower = ref.toLower, capitalize = ref.capitalize, first = ref.first, last = ref.last, values = ref.values, project = ref.project, collect = ref.collect, cat = ref.cat;

  module.exports = function(description) {
    var addVirtualResource, counter, getKey, p, parts, path, paths, r, resource, resources, stripPath, walkPath;
    resources = description.resources;
    counter = 0;
    addVirtualResource = function(p) {
      var key;
      key = "virtual" + counter;
      counter++;
      return resources[key] = {
        path: p,
        description: "Implict resource created for template.",
        actions: {}
      };
    };
    walkPath = function(p) {
      var ante, ref1;
      if (ref1 = p[0], indexOf.call(paths, ref1) < 0) {
        paths.push(p[0]);
        addVirtualResource(p[0]);
      }
      if (p.length === 1) {
        return;
      }
      ante = [p[0], p[1]].join("/");
      p = p.length > 2 ? cat([ante], p.slice(2)) : [ante];
      return walkPath(p);
    };
    stripPath = function(p) {
      if (first(p) === "/") {
        p = p.slice(1);
      }
      if (last(p) === "/") {
        p = p.slice(0, -1);
      }
      return p;
    };
    getKey = function(path) {
      var k, v;
      for (k in resources) {
        v = resources[k];
        if (v.path === path) {
          return k;
        }
      }
      throw new Error("Failure in resource parsing");
    };
    paths = collect(project("path", values(resources)));
    paths = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = paths.length; i < len; i++) {
        path = paths[i];
        results.push(stripPath(path));
      }
      return results;
    })();
    for (r in resources) {
      resource = resources[r];
      p = resource.path;
      if (p === "/") {
        continue;
      }
      resources[r].path = stripPath(p);
    }
    for (r in resources) {
      resource = resources[r];
      if (resource.path === "/") {
        continue;
      }
      p = resource.path.split("/");
      if (p.length === 1) {
        continue;
      }
      walkPath(p);
    }
    for (r in resources) {
      resource = resources[r];
      p = resource.path.replace(/\{.*\}/g, "*");
      if (p === "/") {
        resources[r].permissionsPath = "/";
      } else {
        resources[r].permissionsPath = "/" + p;
      }
    }
    for (r in resources) {
      resource = resources[r];
      p = resource.path;
      parts = p.split("/");
      if (p === "/") {
        resources[r].parent = "/";
        resources[r].pathPart = "/";
      } else {
        resources[r].pathPart = last(parts);
        if (parts.length === 1) {
          resources[r].parent = "/";
        } else {
          resources[r].parent = getKey(parts.slice(0, -1).join("/"));
        }
      }
    }
    description.resources = resources;
    return description;
  };

}).call(this);
