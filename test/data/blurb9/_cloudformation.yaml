AWSTemplateFormatVersion: '2010-09-09'
Description: Backend for the Blurb9 Microblogging App
Resources:
  API:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: blurb9-staging
      Description: Backend for the Blurb9 Microblogging App
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: blurb9-staging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - 'arn:aws:s3:::*'
  DiscoveryOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: API
      ResourceId:
        'Fn::GetAtt':
          - API
          - RootResourceId
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        RequestTemplates:
          application/json: '{statusCode: 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  DiscoveryGetMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: API
      ResourceId:
        'Fn::GetAtt':
          - API
          - RootResourceId
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - DiscoveryGetLambdaHandler
                  - Arn
              - /invocations
        RequestTemplates:
          application/json: |
            {
              "url": {
                "path": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                },
                "query": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                }
              },
              "method": "$context.httpMethod",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              },
              "content" : $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  DiscoveryGetLambdaHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Handler for APIblurb9
      FunctionName: blurb9-staging-discovery-get
      Handler: lib/sky.handler
      Role:
        'Fn::GetAtt':
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Environment:
        Variables:
          baseName: blurb9
          environment: staging
          projectID: fearless-panda-blurb9
          fullName: blurb9-staging
          skyBucket: staging-fearless-panda-blurb9
      Code:
        S3Bucket: staging-fearless-panda-blurb9
        S3Key: package.zip
  DiscoveryGetLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - DiscoveryGetLambdaHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: API
            - /*/GET/
  BlurbsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: API
      ParentId:
        'Fn::GetAtt':
          - API
          - RootResourceId
      PathPart: blurbs
  BlurbsOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: API
      ResourceId:
        Ref: BlurbsResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, POST'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        RequestTemplates:
          application/json: '{statusCode: 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  BlurbsPostMethod:
    DependsOn:
      - BlurbResource
      - BlurbModel
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: API
      ResourceId:
        Ref: BlurbsResource
      AuthorizationType: NONE
      HttpMethod: POST
      RequestModels:
        application/json: Blurb
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - BlurbsPostLambdaHandler
                  - Arn
              - /invocations
        RequestTemplates:
          application/json: |
            {
              "url": {
                "path": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                },
                "query": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                }
              },
              "method": "$context.httpMethod",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              },
              "content" : $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 201
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, POST'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
          - StatusCode: 400
            SelectionPattern: bad request
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, POST'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 201
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  BlurbsPostLambdaHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Handler for APIblurb9
      FunctionName: blurb9-staging-blurbs-post
      Handler: lib/sky.handler
      Role:
        'Fn::GetAtt':
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Environment:
        Variables:
          baseName: blurb9
          environment: staging
          projectID: fearless-panda-blurb9
          fullName: blurb9-staging
          skyBucket: staging-fearless-panda-blurb9
      Code:
        S3Bucket: staging-fearless-panda-blurb9
        S3Key: package.zip
  BlurbsPostLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - BlurbsPostLambdaHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: API
            - /*/POST/blurbs
  BlurbResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: API
      ParentId:
        Ref: BlurbsResource
      PathPart: '{key}'
  BlurbOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: API
      ResourceId:
        Ref: BlurbResource
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        RequestTemplates:
          application/json: '{statusCode: 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  BlurbGetMethod:
    DependsOn:
      - BlurbResource
      - BlurbModel
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: API
      ResourceId:
        Ref: BlurbResource
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.path.key: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - BlurbGetLambdaHandler
                  - Arn
              - /invocations
        RequestTemplates:
          application/json: |
            {
              "url": {
                "path": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                },
                "query": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                }
              },
              "method": "$context.httpMethod",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              },
              "content" : $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
          - StatusCode: 404
            SelectionPattern: not found
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  BlurbGetLambdaHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Handler for APIblurb9
      FunctionName: blurb9-staging-blurb-get
      Handler: lib/sky.handler
      Role:
        'Fn::GetAtt':
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Environment:
        Variables:
          baseName: blurb9
          environment: staging
          projectID: fearless-panda-blurb9
          fullName: blurb9-staging
          skyBucket: staging-fearless-panda-blurb9
      Code:
        S3Bucket: staging-fearless-panda-blurb9
        S3Key: package.zip
  BlurbGetLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - BlurbGetLambdaHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: API
            - /*/GET/blurbs/*
  BlurbPutMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: API
      ResourceId:
        Ref: BlurbResource
      AuthorizationType: NONE
      HttpMethod: PUT
      RequestParameters:
        method.request.path.key: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - BlurbPutLambdaHandler
                  - Arn
              - /invocations
        RequestTemplates:
          application/json: |
            {
              "url": {
                "path": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                },
                "query": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                }
              },
              "method": "$context.httpMethod",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              },
              "content" : $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
          - StatusCode: 404
            SelectionPattern: not found
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  BlurbPutLambdaHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Handler for APIblurb9
      FunctionName: blurb9-staging-blurb-put
      Handler: lib/sky.handler
      Role:
        'Fn::GetAtt':
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Environment:
        Variables:
          baseName: blurb9
          environment: staging
          projectID: fearless-panda-blurb9
          fullName: blurb9-staging
          skyBucket: staging-fearless-panda-blurb9
      Code:
        S3Bucket: staging-fearless-panda-blurb9
        S3Key: package.zip
  BlurbPutLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - BlurbPutLambdaHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: API
            - /*/PUT/blurbs/*
  BlurbDeleteMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: API
      ResourceId:
        Ref: BlurbResource
      AuthorizationType: NONE
      HttpMethod: DELETE
      RequestParameters:
        method.request.path.key: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - BlurbDeleteLambdaHandler
                  - Arn
              - /invocations
        RequestTemplates:
          application/json: |
            {
              "url": {
                "path": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                },
                "query": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))"
                  #if($foreach.hasNext),#end
                  #end
                }
              },
              "method": "$context.httpMethod",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              },
              "content" : $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 204
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
          - StatusCode: 404
            SelectionPattern: not found
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS, GET, PUT, DELETE'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 204
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  BlurbDeleteLambdaHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Handler for APIblurb9
      FunctionName: blurb9-staging-blurb-delete
      Handler: lib/sky.handler
      Role:
        'Fn::GetAtt':
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Environment:
        Variables:
          baseName: blurb9
          environment: staging
          projectID: fearless-panda-blurb9
          fullName: blurb9-staging
          skyBucket: staging-fearless-panda-blurb9
      Code:
        S3Bucket: staging-fearless-panda-blurb9
        S3Key: package.zip
  BlurbDeleteLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - BlurbDeleteLambdaHandler
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: API
            - /*/DELETE/blurbs/*
  BlurbModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Description: TBD
      Name: Blurb
      RestApiId:
        Ref: API
      Schema: >-
        { "title": "Blurb9", "type": "object", "properties": { "content": {
        "type": "string" }, "expiration": { "type": "string", "format":
        "date-time" } } }
  Deployment:
    DependsOn:
      - DiscoveryGetMethod
      - DiscoveryOptionsMethod
      - BlurbsPostMethod
      - BlurbsOptionsMethod
      - BlurbGetMethod
      - BlurbPutMethod
      - BlurbDeleteMethod
      - BlurbOptionsMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: >-
        Backend for the Blurb9 Microblogging App deployment (generated by Panda
        Sky)
      RestApiId:
        Ref: API
      StageName: staging
      StageDescription:
        Description: >-
          staging for Backend for the Blurb9 Microblogging App (generated by
          Panda Sky)
        StageName: staging
        MethodSettings:
          - ResourcePath: /
            HttpMethod: GET
            MetricsEnabled: true
            DataTraceEnabled: false
            CachingEnabled: false
